import core/math (add)
import core/stopgap/collections (List, Empty, count, nth, append)
import ./range (count_inclusive)

function for_each(this: List, action: Function(it: Anything): Action) {
  count_inclusive(1, count(this), fn(i: Number) {
    action(this>>nth(i))
  })
}

function for_each_with_index(this: List, action: Function(it: Anything, index: Number): Action) {
  count_inclusive(1, this>>count(), fn(i: Number) {
    action(this>>nth(i), i)
  })
}

function map(this: List, callback: Function(it: Anything): Anything): List {
  let variable new_list = List()
  signal Append(new_value: Anything): Action
  effect for Append as s => set new_list = new_list>>append(s.new_value)
  for_each(this, fn(it: Anything) cause Append(callback(it)))
  new_list
}

function map_with_index(this: List, callback: Function(it: Anything, index: Number): Anything): List {
  let variable new_list = List()
  signal Append(new_value: Anything): Action
  effect for Append as s => set new_list = new_list>>append(s.new_value)
  for_each_with_index(this, fn(it: Anything, index: Number) cause Append(callback(it, index)))
  new_list
}

function fold(this: List, initial: Anything, callback: Function(previous: Anything, next: Anything): Anything): Anything {
  let variable current = initial
  signal ReadCurrent: Anything
  effect for ReadCurrent => current
  signal WriteCurrent(new_value: Anything): Action
  effect for WriteCurrent as write_current => set current = write_current.new_value

  for_each(this, fn(current: Anything) {
    let next = callback(cause ReadCurrent, current)
    cause WriteCurrent(next)
  })
  current
}

function concat(this: List, other: List): List {
  let variable result = this
  signal Append(item: Anything)
  effect for Append as s {
    set result = result>>append(s.item)
  }
  for_each(other, fn(item: Anything) cause Append(item))
  result
}