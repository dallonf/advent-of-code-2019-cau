import core/math (add)
import core/stopgap/collections (Stack, MaybeStack, Empty)

function for_each(this: MaybeStack, action: Function(it: Anything): Action) {
  let variable current: MaybeStack = this
  loop {
    branch with current {
      is Empty => break
      is Stack as current_stack {
        action(current_stack.top)
        set current = current_stack.next
      }
    }
  }
}

function for_each_with_index(this: MaybeStack, callback: Function(it: Anything, index: Number): Action) {
  let variable index = 0
  signal Increment: Action
  signal RequestIndex: Number
  effect for Increment {
    set index = add(index, 1)
  }
  effect for RequestIndex as request_index => index
  for_each(this, fn(it: Anything) {
    callback(it, cause RequestIndex)
    cause Increment
  })
}

function map(this: MaybeStack, callback: Function(it: Anything): Anything): MaybeStack {
  branch with this {
    is Empty as this => this
    is Stack as this {
      let new_value = callback(this.top)
      Stack(
        new_value,
        map(this.next, callback)
      )
    }
  }
}

function map_with_index(this: MaybeStack, callback: Function(it: Anything, index: Number): Anything): MaybeStack {
  let variable index = 0
  signal Increment: Action
  signal RequestIndex: Number
  effect for Increment {
    set index = add(index, 1)
  }
  effect for RequestIndex as request_index => index
  map(this, fn(it: Anything) {
    let result = callback(it, cause RequestIndex)
    cause Increment
    result
  })
}

function fold(this: MaybeStack, initial: Anything, callback: Function(previous: Anything, next: Anything): Anything): Anything {
  branch with this {
    is Empty as this => initial
    is Stack as this {
      let new_value = callback(initial, this.top)
      fold(this.next, new_value, callback)
    }
  }
}

function at_index(this: MaybeStack, index: Number): Anything {
  let requested_index = index
  signal Return(value: Anything): NeverContinues
  effect for Return as ret {
    return ret.value
  }
  for_each_with_index(this, fn(it: Anything, index: Number) {
    branch {
      if equals(requested_index, index) => cause Return(it)
      else => {}
    }
  })
}

function with_index_changed(this: MaybeStack, index: Number, callback: Function(previous: Anything): Anything): MaybeStack {
  let target_index = index
  map_with_index(this, fn(it: Anything, index: Number) {
    branch {
      if equals(index, target_index) => callback(it)
      else => it
    }
  })
}

function with_index_set(this: MaybeStack, index: Number, new_value: Anything): MaybeStack {
  with_index_changed(this, index, fn(previous: Anything) new_value)
}