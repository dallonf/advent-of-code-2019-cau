// Day 2: 1202 Program Alarm

import core/math (add, multiply)
import core/stopgap/collections (Stack, MaybeStack, Empty)
import aoc/input (NeedInput, Split, ParseNumber)
import project/common/collections (at_index, map, map_with_index, for_each_with_index)
import project/common/cast (as_number, as_text)

function parse_program(text: Text): MaybeStack {
  let items = cause Split(text, ",")
  map(items, fn(it: Anything) cause ParseNumber(as_text(it)))
}

function test() {
  let program = parse_program(cause NeedInput("day02/exampleinput.txt"))
  // let program = Stack(1337, Stack(99, Empty))
  let after_memory = run_vm(program)
  at_index(after_memory, 0)
}

signal ReadMemory(index: Number): Number
signal WriteMemory(index: Number, value: Number): Action
signal Terminate: NeverContinues

function run_vm(program: MaybeStack): MaybeStack {
  let variable memory = program
  let variable instruction_pointer = 0

  effect for Terminate {
    return memory
  }
  
  effect for ReadMemory as it {
    as_number(at_index(memory, it.index))
  }

  effect for WriteMemory as write_memory {
    set memory = map_with_index(memory, fn(it: Anything, index: Number) {
      branch {
        if equals(index, write_memory.index) => write_memory.value
        else => it
      }
    })
  }

  loop {
    set instruction_pointer = execute(instruction_pointer)
    return memory
  }
}

function execute(instruction_pointer: Number): Number {
  let instruction = cause ReadMemory(instruction_pointer)
  branch {
    if equals(instruction, 1337) {
      cause WriteMemory(0, 42)
      add(instruction_pointer, 1)
    }

    if equals(instruction, 1) {
      let position_1 = cause ReadMemory(add(instruction_pointer, 1))
      let position_2 = cause ReadMemory(add(instruction_pointer, 2))
      let position_3 = cause ReadMemory(add(instruction_pointer, 3))

      let value_1 = cause ReadMemory(position_1)
      let value_2 = cause ReadMemory(position_2)
      let result = add(value_1, value_2)

      cause WriteMemory(position_3, result)
      add(instruction_pointer, 4)
    }
    if equals(instruction, 2) {
      let position_1 = cause ReadMemory(add(instruction_pointer, 1))
      let position_2 = cause ReadMemory(add(instruction_pointer, 2))
      let position_3 = cause ReadMemory(add(instruction_pointer, 3))

      let value_1 = cause ReadMemory(position_1)
      let value_2 = cause ReadMemory(position_2)
      let result = multiply(value_1, value_2)
      
      cause WriteMemory(position_3, result)
      add(instruction_pointer, 4)
    }
    if equals(instruction, 99) => cause Terminate
    else => cause AssumptionBroken("what is this instruction lol")
  }
}