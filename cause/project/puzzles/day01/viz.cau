import core/math (add)
import core/text (append, number_to_text)
import core/stopgap/collections (List, Empty, append, nth_last)
import aoc/draw (
  Draw, FrameDone, Rectangle, DrawableText,
  Black, Left, Right, Center, Top,
  Bottom, Red, RedLight
)
import project/common/collections (for_each)

signal NewPart(mass: Number): Action
signal AdditionalFuel(mass: Number): Action

function visualize_part_two(compute: Function(): Anything): Anything {
  object PartAndFuel(
    initial_mass: Number,
    fuel: List,
  )
  function as_part_and_fuel(it: Anything) {
    branch with it {
      is PartAndFuel as it => it
      else => cause AssumptionBroken("should have been a PartAndFuel")
    }
  }

  let variable parts_list: List = List()
  signal ReadParts: List
  effect for ReadParts => parts_list

  function render() {
    let parts_list = cause ReadParts
    let PART_HEIGHT = 48
    let TEXT_HEIGHT = 16
    let variable y_cursor = 0
    signal ReadYCursor: Number
    effect for ReadYCursor => y_cursor
    signal WriteYCursor(value: Number): Action
    effect for WriteYCursor as write => set y_cursor = write.value

    parts_list>>for_each(fn(item: Anything) {
      let item = item>>as_part_and_fuel()
      let y_cursor = cause ReadYCursor()

      cause Draw(DrawableText(
        item.initial_mass>>number_to_text(),
        Black,
        16,
        8, y_cursor,
        Top,
        Left,
      ))

      let offset = PART_HEIGHT>>add(TEXT_HEIGHT)
      let new_offset = y_cursor>>add(offset)
      cause WriteYCursor(new_offset)
    })

    cause FrameDone
  }

  effect for NewPart as new_part {
    set parts_list = parts_list>>append(PartAndFuel(
      new_part.mass,
      List()
    ))
    render()
  }

  effect for AdditionalFuel as additional_fuel {
    branch with parts_list>>nth_last(1) {
      is Empty => cause AssumptionBroken("tried to add fuel but the part doesn't exist")
      is Anything as part => {
        let part = part>>as_part_and_fuel()
        let updated_part = PartAndFuel(
          part.initial_mass,
          part.fuel>>append(additional_fuel.mass)
        )
      }
    }
    render()
  }

  render()
  compute()
}