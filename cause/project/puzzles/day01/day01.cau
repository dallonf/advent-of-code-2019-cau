// Day 1: The Tyranny of the Rocket Equation

import core/math (add, subtract, divide, floor, greater_than)
import core/stopgap/collections (Stack, MaybeStack, Empty)
import aoc/input (NeedInputLines, ParseNumber)

function fuel_required(mass: Number): Number {
  let result = divide(mass, 3)
  let result = floor(result)
  let result = subtract(result, 2)
  result
}

function part_one() {
  let input = cause NeedInputLines("day01/puzzleinput.txt")
  let variable result = 0
  let variable current: MaybeStack = input
  loop {
    branch with current {
      is Empty => break
      is Stack as current_stack {
        let mass = branch with current_stack.top {
          is Text as line => cause ParseNumber(line)
          else => cause AssumptionBroken("")
        }
        set result = add(result, fuel_required(mass))
        set current = current_stack.next
      }
    }
  }
  result
}

function recursive_fuel_required(mass: Number): Number {
  let fuel_mass = fuel_required(mass)
  branch {
    if greater_than(fuel_mass, 0) => {
      let extra_mass = recursive_fuel_required(fuel_mass)
      add(fuel_mass, extra_mass)
    }
    else => 0
  }
}

function test() {
  recursive_fuel_required(1969)
}

function part_two() {
  cause Debug("todo")
}
