// Day 1: The Tyranny of the Rocket Equation

import core/math (add, subtract, divide, floor, greater_than)
import core/stopgap/collections (Stack, MaybeStack, Empty)
import aoc/input (NeedInputLines, ParseNumber)
import project/common/collections (map, fold)
import project/common/cast (as_text, as_number)
import ./viz (NewPart, AdditionalFuel, visualize_part_two)

function fuel_required(mass: Number): Number {
  let result = divide(mass, 3)
  let result = floor(result)
  let result = subtract(result, 2)
  result
}

function part_one() {
  let input = cause NeedInputLines("day01/puzzleinput.txt")
  let fuel = map(input, fn(it: Anything) {
    let mass = cause ParseNumber(as_text(it))
    fuel_required(mass)
  })
  fold(fuel, 0, fn(previous: Anything, next: Anything)
    add(as_number(previous), as_number(next))
  )
}

function recursive_fuel_required(mass: Number): Number {
  let fuel_mass = fuel_required(mass)
  branch {
    if greater_than(fuel_mass, 0) => {
      let extra_mass = recursive_fuel_required(fuel_mass)
      add(fuel_mass, extra_mass)
    }
    else => 0
  }
}

function part_two() {
  visualize_part_two(fn() {
    // let input = cause NeedInputLines("day01/exampleinput.txt")
    let input = cause NeedInputLines("day01/puzzleinput.txt")
    let fuel = map(input, fn(it: Anything) {
      let mass = cause ParseNumber(as_text(it))
      cause NewPart(mass)
      recursive_fuel_required(mass)
    })
    fold(fuel, 0, fn(previous: Anything, next: Anything)
      add(as_number(previous), as_number(next))
    )
  })
}
